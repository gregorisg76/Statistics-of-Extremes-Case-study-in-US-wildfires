xi <- par[3]
for (val in Y) {
if(1 + xi * (val - mu)/ sigma <= 0){
return(-Inf)
}
}
A <- -m * log(sigma)
if(xi == 0) {
B <- -sum(Y - mu) / sigma
C <- -sum(exp(-((Y - mu) / sigma)))
} else {
B <- -(1 + 1/xi) * sum(log(pmax(1 + xi * ((Y - mu)/sigma))))
C <- -sum(pmax(1 + xi * ((Y - mu)/sigma))^(-1/xi))
}
return(A + B + C)
}
# Random test
a <- c(3,1,0)
b <- c(2,2,3,4,3,4,3,3,3,3,1)
gev_llik(a,b)
gev_llik <- function(par,Y){
m <- length(Y)
sigma <- exp(par[2])
mu <- par[1]
xi <- par[3]
for (val in Y) {
if(1 + xi * (val - mu)/ sigma <= 0){
return(-Inf)
}
}
A <- -m * log(sigma)
if(-0.5 < xi < 0.5) {
B <- -sum(Y - mu) / sigma
C <- -sum(exp(-((Y - mu) / sigma)))
} else {
B <- -(1 + 1/xi) * sum(log(pmax(1 + xi * ((Y - mu)/sigma))))
C <- -sum(pmax(1 + xi * ((Y - mu)/sigma))^(-1/xi))
}
return(A + B + C)
}
gev_llik <- function(par,Y){
m <- length(Y)
sigma <- exp(par[2])
mu <- par[1]
xi <- par[3]
for (val in Y) {
if(1 + xi * (val - mu)/ sigma <= 0){
return(-Inf)
}
}
A <- -m * log(sigma)
if(-0.5 < xi < 0.5) {
B <- -sum(Y - mu) / sigma
C <- -sum(exp(-((Y - mu) / sigma)))
} else {
B <- -(1 + 1/xi) * sum(log(pmax(1 + xi * ((Y - mu)/sigma))))
C <- -sum(pmax(1 + xi * ((Y - mu)/sigma))^(-1/xi))
}
return(A + B + C)
}
gev_llik <- function(par,Y){
m <- length(Y)
sigma <- exp(par[2])
mu <- par[1]
xi <- par[3]
for (val in Y) {
if(1 + xi * (val - mu)/ sigma <= 0){
return(-Inf)
}
}
A <- -m * log(sigma)
if( xi > -0.5 && xi < 0.5) {
B <- -sum(Y - mu) / sigma
C <- -sum(exp(-((Y - mu) / sigma)))
} else {
B <- -(1 + 1/xi) * sum(log(pmax(1 + xi * ((Y - mu)/sigma))))
C <- -sum(pmax(1 + xi * ((Y - mu)/sigma))^(-1/xi))
}
return(A + B + C)
}
if(xi > -0.05 && xi < 0.05) {
B <- -sum(Y) / sigma
} else {
B <- -(1 + 1/xi) * sum(log(pmax(1 + xi * (Y / sigma))))
}
pareto_llik <- function(par,Y){
k <- length(Y)
sigma <- exp(par[1])
xi <- par[2]
for (val in Y) {
if(1 + xi * val / sigma <= 0){
return(-Inf)
}
}
A <- - k * log(sigma)
if(xi > -0.05 && xi < 0.05) {
B <- -sum(Y) / sigma
} else {
B <- -(1 + 1/xi) * sum(log(pmax(1 + xi * (Y / sigma))))
}
return(A + B)
}
load("C:/Users/grego/Downloads/data_train.RData")
load("/cloud/project/data_train.RData")
View(pareto_llik)
gev_llik(c(mean(data_tain_df$BA),sd(data_tain_df$BA), 1),data_tain_df$BA)
gev_llik(c(mean(data_train_df$BA),sd(data_train_df$BA), 1),data_train_df$BA)
xi <- 1
BA <- data_train_DF$BA
mu <- mean(BA)
sigma <- sd(BA)
xi <- 1
par <-(mu,sigma,xi)
gev_llik(par, BA)
par <-c(mu,sigma,xi)
gev_llik(par, BA)
mu
sigma
mu <- mean(BA, na.rm=TRUE)
mu
sigma <- sd(BA, na.rm=TRUE)
xi <- 1
par <-c(mu,sigma,xi)
gev_llik(par, BA)
mu <- mean(BA, na.rm=TRUE)
sigma <- sd(BA, na.rm=TRUE)
xi <- 1
par <-c(mu,sigma,xi)
gev_llik(par, BA)
gev_llik(par, na.omit(BA))
gev_llik(par, na.omit(BA))
xi <- -2
gev_llik(par, na.omit(BA))
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
xi <- -10
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
gev_llik(par, na.omit(BA))
BA
xi <- -1
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
BA <- data_train_DF$BA[1:30]
mu <- mean(BA, na.rm=TRUE)
sigma <- sd(BA, na.rm=TRUE)
xi <- -1
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
xi <- -100
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
xi <- -1000
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
xi <- 1000
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
MU
mu
xi <- 1/2
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
BA
BA <- data_train_DF$BA[1:30]
mu <- mean(BA, na.rm=TRUE)
sigma <- sd(BA, na.rm=TRUE)
xi <- 1/2
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
BA <- data_train_DF$BA
mu <- mean(BA, na.rm=TRUE)
sigma <- sd(BA, na.rm=TRUE)
xi <- 1/2
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
xi <- 0.1
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
xi <- -0.1
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
BA <- data_train_DF$BA[1:1000]
mu <- mean(BA, na.rm=TRUE)
sigma <- sd(BA, na.rm=TRUE)
xi <- -0.1
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
BA <- data_train_DF$BA[1:10000]
mu <- mean(BA, na.rm=TRUE)
sigma <- sd(BA, na.rm=TRUE)
xi <- -0.1
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
xi <- -0.01
BA <- data_train_DF$BA[1:10000]
mu <- mean(BA, na.rm=TRUE)
sigma <- sd(BA, na.rm=TRUE)
xi <- -0.01
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
BA <- data_train_DF$BA[1:10000]
mu <- mean(BA, na.rm=TRUE)
sigma <- sd(BA, na.rm=TRUE)
xi <- -0.06
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
install,packages("gev_optim")
install.packages("gev_optim")
gev_optim = function(z, muX, sigX, xiX, gr = gev_grad, se = TRUE,
mulink="identity", siglink="exponential", xilink="identity",
init=NULL){
# Fit the GEV distribution with allowances of different model matrices, these are specified in advance
# fit_GEV will create model matrices based on link functions and the data frame
# Get initial conditions
mup = dim(muX)[2]; sigp = dim(sigX)[2]; xip = dim(xiX)[2]
if(is.null(init)) init = gev_init(z,mup,sigp,xip)
bindex = c(rep(1, mup), rep(2, sigp), rep(3, xip))
# Use optim with fnscale = -1 to maximise the likelihood from GEVlikX_diffX
maxl = optim(par = init, fn = gev_likfit, gr=gr, hessian = TRUE, method = "BFGS",
control=list(fnscale=-1, maxit=1000), z=z, muX=muX, sigX = sigX, xiX=xiX,
mulink=mulink, siglink=siglink, xilink=xilink)
val = maxl$value
if(!se) se = NULL
if(se){
cov = solve(maxl$hessian)
se = sqrt(diag(abs(cov)))
}
# Output normal optim output, but also details of the model, so that when the model is put
# into other functions, they can read the link functions and model matrices etc
return(list("value"=maxl$value, "par"=maxl$par, "se"=se, "mulink"=mulink,
"par_list" = list("mu" = maxl$par[bindex==1], "sig" = maxl$par[bindex==2], "xi" = maxl$par[bindex==3]),
"se_list" = list("mu" = se[bindex==1], "sig" = se[bindex==2], "xi" = se[bindex==3]),
"siglink"=siglink, "xilink"=xilink, "modX" = list("mu"=muX, "sig"=sigX, "xi"=xiX)))
}
gev_optim(BA[1:100])
gev_optim(BA[1:100],mu,sigma,xi)
install.packages("remotes")
remotes::install_github("dannyjameswilliams/danielR")
View(gev_optim)
View(gev_optim)
View(gev_optim)
gev_optim(BA[1:100],mu,sigma,xi)
gev_init = function(z,mup,sigp,xip,siglink="exponential"){
init = numeric(sum(mup,sigp,xip))
init[mup+1] = sqrt(6*var(z))/pi
init[mup+sigp+1] = 0.1
init[1] = mean(z) - 0.57722*init[mup+1]
if(mup>1) if(siglink=="exponential" && init[mup+1]!=0) init[mup+1] = log(init[mup+1])
return(init)
}
gev_optim(BA[1:100],mu,sigma,xi)
optim(par)
optim?
optim?
optim()?
optim?
optim(par,gev_llik)
optim(par,gev_llik)
optim(par,gev_llik,Y = BA)
optim(par,gev_llik,Y <- BA)
optim(par,gev_llik,Y = BA)
BA <- data_train_DF$BA[1:100]
mu <- mean(BA, na.rm=TRUE)
sigma <- sd(BA, na.rm=TRUE)
xi <- 0.5
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
optim(par,gev_llik,Y = BA)
BA <- data_train_DF$BA[1:30]
mu <- mean(BA, na.rm=TRUE)
sigma <- sd(BA, na.rm=TRUE)
xi <- 0.5
par <-c(mu,sigma,xi)
gev_llik(par, na.omit(BA))
optim(par,gev_llik,Y = BA)
optim(par,gev_llik,Y = BA, method = "BFGS")
optim(par,gev_llik,Y = BA, method = "Nelder-Mead")
optim(par,-gev_llik,Y = BA, method = "Nelder-Mead")
optim(par,gev_llik,Y = BA, method = "Nelder-Mead")
gev_llik <- function(par,Y){
m <- length(Y)
sigma <- exp(par[2])
mu <- par[1]
xi <- par[3]
for (val in Y) {
if(1 + xi * (val - mu)/ sigma <= 0){
return(-Inf)
}
}
A <- -m * log(sigma)
if(xi > -0.05 && xi < 0.05) {
B <- -sum(Y - mu) / sigma
C <- -sum(exp(-((Y - mu) / sigma)))
} else {
B <- -(1 + 1/xi) * sum(log(pmax(1 + xi * ((Y - mu)/sigma))))
C <- -sum(pmax(1 + xi * ((Y - mu)/sigma))^(-1/xi))
}
return -(A + B + C)
}
optim(par,gev_llik,Y = BA, method = "Nelder-Mead")
neg_gev_llik(par, Y) <-
return(- gev_llik(par,Y))
neg_gev_llik(par, Y) <-
return(- gev_llik(par,Y))
gev_llik <- function(par,Y){
m <- length(Y)
sigma <- exp(par[2])
mu <- par[1]
xi <- par[3]
for (val in Y) {
if(1 + xi * (val - mu)/ sigma <= 0){
return(-Inf)
}
}
A <- -m * log(sigma)
if(xi > -0.05 && xi < 0.05) {
B <- -sum(Y - mu) / sigma
C <- -sum(exp(-((Y - mu) / sigma)))
} else {
B <- -(1 + 1/xi) * sum(log(pmax(1 + xi * ((Y - mu)/sigma))))
C <- -sum(pmax(1 + xi * ((Y - mu)/sigma))^(-1/xi))
}
return(A + B + C)
}
neg_gev_llik(par, Y) <-
return(- gev_llik(par,Y))
neg_gev_llik(par, Y) <-
num <- gev_llik(par,Y)
neg_gev_llik(par, Y) <- function(par,Y){
num <- gev_llik(par,Y)
return(-num)
}
optim(par,neg_gev_llik,Y = BA, method = "Nelder-Mead")
neg_gev_llik(par, Y) <- function(par,Y){
num <- gev_llik(par,Y)
return(-num)
}
neg_gev_llik(par, Y) <- function(par,Y){
num <- gev_llik(par,Y)
return(-num)
}
neg_gev_llik <- function(par,Y){
num <- gev_llik(par,Y)
return(-num)
}
optim(par, neg_gev_llik,Y = BA, method = "Nelder-Mead")
optim(par, neg_gev_llik,Y = BA, method = "BFGS")
Nelder-Mead
optim(par, neg_gev_llik,Y = BA, method = "Nelder-Mead")
optim(par, neg_gev_llik,Y = BA, method = "Nelder-Mead")
par <- c( 0.07508949, -0.87900738,  5.52907746)
gev_llik(par, na.omit(BA))
return_level <- function(par, p) {}
return_level <- function(par, p) {
sigma <- exp(par[2])
mu <- par[1]
xi <- par[3]
y_p <- -log(1-p)
z_p <- mu - (sigma/xi) * (1-y_p^(-xi))
return(z_p)
}
return_level(par,0.95)
return_level(par,0.05)
return_level(par,0.5)
return_level <- function(par, p) {
sigma <- exp(par[2])
mu <- par[1]
xi <- par[3]
y_p <- -log(1-p)
if(xi > -0.05 && xi < 0.05) {
z_p <- mu - sigma * log(y_p)
} else{
z_p <- mu - (sigma/xi) * (1-y_p^(-xi))
}
return(z_p)
}
par <- c( 0.07508949, -0.87900738,  5.52907746)
gev_llik(par, na.omit(BA))
return_level(par,0.5)
par <- c( 0.07508949, -0.87900738,  0.052907746)
return_level(par,0.5)
par <- c( 0.07508949, -0.87900738,  5.52907746)
gev_llik(par, na.omit(BA))
return_level(par,0.5)
View(data_train_DF)
View(data_train_DF)
View(data_train_DF)
return_level(par,0.5)
filter(data_train_DF, lon>=-88.030 & lon<=-84.052)
data_train_DF %>% filter(lon>=-88.030 & lon<=-84.052)
install.packages("magrittr")
data_train_DF %>% filter(lon>=-88.030 & lon<=-84.052)
filter(data_train_DF, lon>=-88.030 & lon<=-84.052)
filter(data_train_DF, data_train_DF$lon>=-88.030 & data_train_DF$lon<=-84.052)
a
data_train_DF$Alabama <- data_train_DF$lon > -88.03
data_train_DF$Alabama <- data_train_DF$lon > -88.03 & data_train_DF$lon <-84.05
data_train_DF$Alabama <- data_train_DF$lon > -88.03 & data_train_DF$lon < -84.05
data_train_DF$Alabama <- data_train_DF$lon > -88.03 & data_train_DF$lon < -84.05
View(data_train_DF)
data_train_DF$Alabama <- data_train_DF$lon >= -88.03 & data_train_DF$lon <= -84.05 & data_train_DF$lat <= 35.00 & data_train_DF$lon >= 30.015
filter(data_train_DF, Alabama == "TRUE")
filter(data_train_DF, data_train_DF$Alabama == "TRUE")
a
a <- subset(data_train_DF, data_train_DF$Alabama == "TRUE")
a
a <- subset(data_train_DF, Alabama == "TRUE")
a
a <- subset(data_train_DF, Alabama == 'TRUE')
a
a <- subset(data_train_DF, Alabama == TRUE)
a
a <- subset(data_train_DF, Alabama == TRUE)
a
a <- subset(data_train_DF, Alabama == FALSE)
a <- subset(data_train_DF, Alabama == TRUE)
a
data_train_DF$Alabama <- data_train_DF$lon >= -88.03 & data_train_DF$lon <= -84.05 & data_train_DF$lat <= 35.00 & data_train_DF$lat >= 30.015
a <- subset(data_train_DF, Alabama == TRUE)
a
#Add map to base plot
base_world_messy <- p + geom_polygon(data=world_map, aes(x=long, y=lat, group=group),
colour="light green", fill="light green")+   geom_point(data=a,
aes(x=lon, y=lat, size=BA), colour="Deep Pink",
fill="Pink",pch=21, alpha=I(0.7))
p <- ggplot() + coord_fixed() +
xlab("") + ylab("")
#Add map to base plot
base_world_messy <- p + geom_polygon(data=world_map, aes(x=long, y=lat, group=group),
colour="light green", fill="light green")+   geom_point(data=a,
aes(x=lon, y=lat, size=BA), colour="Deep Pink",
fill="Pink",pch=21, alpha=I(0.7))
library(ggplot2)
America_map <- map_data("state")
map_data <-
base_world +
geom_point(data=cities,
aes(x=Longitude, y=Latitude), colour="Deep Pink",
fill="Pink",pch=21, size=5, alpha=I(0.7))
p <- ggplot() + coord_fixed() +
xlab("") + ylab("")
Alabama <- c(-88.030,	-84.052,	 35.000,	 30.015)
#Add map to base plot
base_world_messy <- p + geom_polygon(data=world_map, aes(x=long, y=lat, group=group),
colour="light green", fill="light green")+   geom_point(data=a,
aes(x=lon, y=lat, size=BA), colour="Deep Pink",
fill="Pink",pch=21, alpha=I(0.7))
base_world_messy
America_map <- map_data("state")
map_data <-
base_world +
geom_point(data=cities,
aes(x=Longitude, y=Latitude), colour="Deep Pink",
fill="Pink",pch=21, size=5, alpha=I(0.7))
p <- ggplot() + coord_fixed() +
xlab("") + ylab("")
Alabama <- c(-88.030,	-84.052,	 35.000,	 30.015)
library(maps)
library(ggplot2)
America_map <- map_data("state")
map_data <-
base_world +
geom_point(data=cities,
aes(x=Longitude, y=Latitude), colour="Deep Pink",
fill="Pink",pch=21, size=5, alpha=I(0.7))
p <- ggplot() + coord_fixed() +
xlab("") + ylab("")
Alabama <- c(-88.030,	-84.052,	 35.000,	 30.015)
#Add map to base plot
base_world_messy <- p + geom_polygon(data=world_map, aes(x=long, y=lat, group=group),
colour="light green", fill="light green")+   geom_point(data=a,
aes(x=lon, y=lat, size=BA), colour="Deep Pink",
fill="Pink",pch=21, alpha=I(0.7))
base_world_messy
library(maps)
library(ggplot2)
America_map <- map_data("state")
map_data <-
base_world +
geom_point(data=cities,
aes(x=Longitude, y=Latitude), colour="Deep Pink",
fill="Pink",pch=21, size=5, alpha=I(0.7))
p <- ggplot() + coord_fixed() +
xlab("") + ylab("")
#Add map to base plot
base_world_messy <- p + geom_polygon(data=world_map, aes(x=long, y=lat, group=group),
colour="light green", fill="light green")+   geom_point(data=a,
aes(x=lon, y=lat, size=BA), colour="Deep Pink",
fill="Pink",pch=21, alpha=I(0.7))
#Add map to base plot
base_world_messy <- p + geom_polygon(data=America_map, aes(x=long, y=lat, group=group),
colour="light green", fill="light green")+   geom_point(data=a,
aes(x=lon, y=lat, size=BA), colour="Deep Pink",
fill="Pink",pch=21, alpha=I(0.7))
base_world_messy
#Add map to base plot
base_world_messy <- p + geom_polygon(data=America_map, aes(x=long, y=lat, group=group),
colour="light green", fill="light green")+   geom_point(data=a,
aes(x=lon, y=lat, size=BA), colour="Deep Pink",
fill="Pink",pch=21, alpha=I(0.2))
base_world_messy
BA <- a$BA
mu <- mean(BA, na.rm=TRUE)
sigma <- sd(BA, na.rm=TRUE)
xi <- 0.5
par <-c(mu,sigma,xi)
optim(par, neg_gev_llik,Y = BA, method = "Nelder-Mead")
par <- c( 0.07508949, -0.87900738,  5.52907746)
gev_llik(par, na.omit(BA))
return_level(par,0.5)
optim(par, neg_gev_llik,Y = BA, method = "Nelder-Mead")
